🏠 Hostel Finder Web Platform — Detailed Project Prompt
1. 🎯 Concept

Build a hostel listing and discovery platform where:

Hostel owners can register, log in, and post their hostels with room details, prices, facilities, images, and contact info.

Students/clients can search, filter, and view hostels based on budget, facilities, and distance from their university/work.

Platform admin can approve/verify listings, manage users, and monitor platform activity.

👉 The platform is only for advertising/showcasing hostels. There will be no payments, reservations, or chat system. Clients contact owners directly.

2. 🖥️ Tech Stack

Backend: Django (Python 3.12+), Django REST Framework (optional later for API support)

Frontend: Django templates + Tailwind CSS for styling, Alpine.js for small interactivity

Database: PostgreSQL (with portable schema so fallback to MySQL is possible)

Media Storage: Local storage in dev, AWS S3/DigitalOcean Spaces for production (for hostel images)

Deployment: Docker + Gunicorn/Nginx on DigitalOcean or AWS (Heroku/Render for MVP)

Maps/Distance: Google Maps API (store lat/lon in DB, calculate distance server-side)

3. 📋 Features
👨‍💼 Hostel Owners

Register/Login (Django Auth or allauth for extensibility)

Profile management (name, phone, WhatsApp/email, profile image optional)

Add hostel(s):

Hostel name

Address (auto geocoded with Google Maps API → lat/lon stored)

Room types (single/shared/etc.) with prices

Facilities (checkbox: Wi-Fi, laundry, meals, AC, CCTV, etc.)

Upload multiple images

Contact details (click-to-show system to track engagement)

Edit/Delete listings

Dashboard: view engagement stats (e.g., how many times contact was revealed)

👩 Students/Clients

Browse hostels (list + card grid view)

Filters:

Price range slider

Facilities (checkboxes)

Distance from university/work (Google Maps API + backend filtering)

Room type

Sort options: lowest price, nearest distance, highest rated (if reviews added later)

Hostel detail page:

Photos (gallery/lightbox)

Description & facilities

Price and room types

Show Contact button → reveal phone/email and increment counter in DB

Option to save favorite hostels (requires login)

👨‍💻 Admin

Approve/verify hostel listings (optional toggle: verified/unverified)

Manage users (owners, students)

Dashboard with key stats:

Active hostels

Number of contact reveals

Most searched locations/universities

Recently added hostels

Reports management (if users flag fake/spam listings)

🌟 Extra/Nice-to-Have

Reviews & ratings system (students review hostels, owners can reply)

SEO optimization (university-based landing pages: “Hostels near UMT”, “Hostels near LUMS”)

Favorites/Wishlist for logged-in students

Verification badge for trusted hostels

Analytics for hostel owners (weekly/monthly views, clicks, searches)

4. 🛠️ Database Schema (PostgreSQL-compatible but portable to MySQL)
User Table (Django default extended)

id (PK)

username, email, password (auth)

role (choices: owner, student, admin)

phone_number

created_at

Hostel

id (PK)

owner (FK → User)

name

address (text)

latitude (float)

longitude (float)

description (text)

contact_email / contact_phone

is_verified (boolean, default false)

created_at

RoomType

id (PK)

hostel (FK → Hostel)

type (single, double, shared, etc.)

price (decimal)

Facility

id (PK)

name (Wi-Fi, laundry, AC, etc.)

HostelFacility (Many-to-Many)

hostel (FK → Hostel)

facility (FK → Facility)

HostelImage

id (PK)

hostel (FK → Hostel)

image_url (stored in media/S3)

ContactReveal

id (PK)

hostel (FK → Hostel)

user (FK → User, nullable for guests)

timestamp

(Optional) Review

id (PK)

hostel (FK → Hostel)

user (FK → User)

rating (1–5)

review_text

created_at

5. 🎨 Frontend/UI Guidelines (Django + Tailwind)

Design: Clean, modern, mobile-first UI (students will mostly use phones).

Pages:

Home (search bar + featured hostels + filters)

Hostel list/grid view with filters sidebar

Hostel detail page (gallery, info, contact button)

Login/Register

Owner dashboard (add/manage hostels)

Admin dashboard (approve/manage)

Components:

Navbar with login/logout, search bar

Card components for hostels (image, name, price, distance, facilities icons)

Modal for "Show Contact" (with counter increment)

Tailwind: use responsive grids, rounded-xl, shadow-md, hover effects, badges for facilities

6. ⚡ Best Practices & Techniques

Use Django Class-Based Views (CBVs) and generic views for CRUD.

Use Django ORM for portability (no raw SQL unless necessary).

Use SlugField for SEO-friendly URLs (e.g., /hostels/umt-hostel-lahore).

Use Django Forms with crispy-forms + Tailwind integration for clean forms.

Optimize image uploads with Pillow, compress images before saving.

Use pagination for hostel list results.

Add caching (Redis) for popular searches & hostel detail pages.

Use environment variables for secrets (Google Maps API keys, DB creds).

Use PostgreSQL indexes on price, location (lat/lon), facilities for faster filtering.

7. 🚀 Future Scalability

Move images to S3/Spaces.

Add ElasticSearch for advanced full-text search (if needed).

Expose APIs via Django REST Framework → later build mobile apps.

Break into microservices if scale demands (keep Django monolith at start).
